// Copyright (c) 2015, Robert Escriva
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of this project nor the names of its contributors may
//       be used to endorse or promote products derived from this software
//       without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Generated test vectors against the demo Python implementation provided here:
// https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders
// Demo implementation and accompanying text licenced under Creative Commons
// Attribution-ShareAlike License.

// redupe
#include "redupe.h"
#include "redupe-internal.h"

// testing
#include "th.h"

TEST(RsCalcSyndromes, Test0)
{
    unsigned char msg[] = {198, 151, 207, 56, 253, 35, 133, 190, 189, 66, 24, 25, 170, 38, 117, 100, 91, 179, 113, 236, 152, 246, 72, 120, 94, 21, 217, 136, 46, 236, 187, 124, 4, 177, 1, 107, 12, 230, 205, 37, 233, 198, 231, 135, 129, 195, 187, 182, 183, 29, 119, 137, 89, 77, 31, 167, 198, 42, 172, 0, 192, 66, 96, 90, 142, 171, 38, 122, 133, 45, 16, 97, 124, 53, 13, 169, 192, 162, 20, 16, 13, 69, 9, 1, 225, 216, 210, 145, 177, 141, 206, 131, 44, 178, 201, 252, 145, 53, 82, 151, 246, 173, 60, 167, 155, 204, 65, 160, 137, 156, 139, 211, 99, 230, 185, 101, 104, 8, 71, 135, 148, 47, 52, 4, 155, 207, 187, 246, 225, 156, 78};
    const unsigned msg_sz = 131;
    unsigned char r[] = {0, 0, 0, 0, 0};
    const unsigned r_sz = 5;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 4, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test1)
{
    unsigned char msg[] = {198, 151, 207, 56, 253, 35, 133, 190, 189, 66, 24, 25, 170, 38, 117, 100, 91, 179, 113, 236, 152, 246, 72, 120, 94, 21, 217, 136, 46, 236, 187, 124, 4, 177, 1, 107, 12, 230, 205, 37, 233, 198, 231, 135, 129, 195, 187, 182, 183, 29, 119, 137, 89, 77, 31, 167, 198, 42, 172, 0, 192, 66, 96, 90, 142, 171, 38, 122, 133, 45, 16, 97, 149, 53, 13, 169, 192, 162, 20, 16, 13, 69, 9, 1, 225, 216, 210, 145, 177, 141, 206, 131, 44, 178, 201, 252, 145, 53, 82, 151, 246, 173, 60, 167, 155, 204, 65, 160, 137, 156, 139, 211, 99, 230, 185, 101, 104, 8, 71, 135, 148, 47, 52, 4, 155, 207, 187, 246, 225, 156, 78};
    const unsigned msg_sz = 131;
    unsigned char r[] = {0, 233, 70, 52, 198};
    const unsigned r_sz = 5;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 4, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test2)
{
    unsigned char msg[] = {198, 151, 207, 56, 253, 35, 133, 190, 189, 66, 24, 25, 170, 38, 117, 100, 91, 179, 113, 236, 152, 246, 72, 120, 94, 21, 217, 136, 46, 236, 187, 124, 4, 177, 1, 107, 12, 230, 205, 37, 233, 198, 231, 135, 129, 195, 187, 182, 183, 29, 119, 137, 89, 77, 31, 167, 198, 42, 172, 0, 192, 66, 96, 90, 142, 171, 38, 122, 133, 45, 16, 97, 149, 53, 13, 169, 192, 162, 20, 16, 13, 69, 9, 1, 225, 216, 210, 243, 177, 141, 206, 131, 44, 178, 201, 252, 145, 53, 82, 151, 246, 173, 60, 167, 155, 204, 65, 160, 137, 156, 139, 211, 99, 230, 185, 101, 104, 8, 71, 135, 148, 47, 52, 4, 155, 207, 187, 246, 225, 156, 78};
    const unsigned msg_sz = 131;
    unsigned char r[] = {0, 139, 98, 179, 155};
    const unsigned r_sz = 5;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 4, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test3)
{
    unsigned char msg[] = {80, 59, 38, 19, 101, 142, 183, 197, 203, 106, 189, 113, 40, 223, 245, 126, 135, 48, 62, 104, 206, 213, 107, 41, 33, 43, 81, 178, 100, 251, 43, 22, 237, 95, 166, 135, 119, 239, 233, 246, 51, 129, 177, 153, 158, 220, 29, 226, 1, 173, 106, 154, 23, 121, 104, 15, 35, 106, 222, 223, 240, 55, 51, 157, 14, 252, 111, 196, 243, 48, 193, 209, 118, 144, 244, 168, 230, 245, 57, 115, 152, 201, 175, 54, 180, 197, 225, 52, 79, 16, 94, 101, 209, 203, 190, 222, 6, 231, 232, 197, 128, 249, 159, 240, 69, 245, 118, 44, 133, 209, 44, 147, 70, 76, 65, 170, 231, 245, 185, 180, 218, 229, 70, 71, 39, 113, 238, 250, 204, 250, 125, 246, 239, 161, 81, 80, 118, 63, 17, 64, 82, 56, 80, 240};
    const unsigned msg_sz = 144;
    unsigned char r[] = {0, 0, 0, 0, 0};
    const unsigned r_sz = 5;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 4, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test4)
{
    unsigned char msg[] = {80, 59, 38, 19, 101, 142, 183, 197, 203, 106, 189, 113, 40, 223, 245, 126, 99, 48, 62, 104, 206, 213, 107, 41, 33, 43, 81, 178, 100, 251, 43, 22, 237, 95, 166, 135, 119, 239, 233, 246, 51, 129, 177, 153, 158, 220, 29, 226, 1, 173, 106, 154, 23, 121, 104, 15, 35, 106, 222, 223, 240, 55, 51, 157, 14, 252, 111, 196, 243, 48, 193, 209, 118, 144, 244, 168, 230, 245, 57, 115, 152, 201, 175, 54, 180, 197, 225, 52, 79, 16, 94, 101, 209, 203, 190, 222, 6, 231, 232, 197, 128, 249, 159, 240, 69, 245, 118, 44, 133, 209, 44, 147, 70, 76, 65, 170, 231, 245, 185, 180, 218, 229, 70, 71, 39, 113, 238, 250, 204, 250, 125, 246, 239, 161, 81, 80, 118, 63, 17, 64, 82, 56, 80, 240};
    const unsigned msg_sz = 144;
    unsigned char r[] = {0, 228, 24, 114, 12};
    const unsigned r_sz = 5;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 4, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test5)
{
    unsigned char msg[] = {80, 59, 38, 19, 101, 142, 183, 197, 203, 106, 189, 113, 40, 223, 245, 126, 99, 48, 62, 104, 206, 213, 107, 41, 33, 43, 81, 178, 100, 251, 43, 22, 237, 95, 166, 135, 119, 239, 233, 246, 51, 129, 177, 153, 158, 220, 29, 226, 1, 200, 106, 154, 23, 121, 104, 15, 35, 106, 222, 223, 240, 55, 51, 157, 14, 252, 111, 196, 243, 48, 193, 209, 118, 144, 244, 168, 230, 245, 57, 115, 152, 201, 175, 54, 180, 197, 225, 52, 79, 16, 94, 101, 209, 203, 190, 222, 6, 231, 232, 197, 128, 249, 159, 240, 69, 245, 118, 44, 133, 209, 44, 147, 70, 76, 65, 170, 231, 245, 185, 180, 218, 229, 70, 71, 39, 113, 238, 250, 204, 250, 125, 246, 239, 161, 81, 80, 118, 63, 17, 64, 82, 56, 80, 240};
    const unsigned msg_sz = 144;
    unsigned char r[] = {0, 129, 39, 82, 138};
    const unsigned r_sz = 5;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 4, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test6)
{
    unsigned char msg[] = {49, 154, 8, 115, 206, 236, 233, 3, 227, 84, 69, 122, 219, 208, 246, 89, 0, 75, 213, 179, 20, 218, 45, 32, 239, 245, 18, 127, 34, 42, 227, 145, 113, 243, 198, 185, 225, 249, 84, 98, 148, 26, 227, 105, 30, 185, 31, 167, 150, 34, 69, 170, 11, 79};
    const unsigned msg_sz = 54;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test7)
{
    unsigned char msg[] = {49, 154, 8, 115, 206, 236, 233, 3, 227, 84, 69, 122, 219, 208, 190, 89, 0, 75, 213, 179, 20, 218, 45, 32, 239, 245, 18, 127, 34, 42, 227, 145, 113, 243, 198, 185, 225, 249, 84, 98, 148, 26, 227, 105, 30, 185, 31, 167, 150, 34, 69, 170, 11, 79};
    const unsigned msg_sz = 54;
    unsigned char r[] = {0, 72, 116, 140, 254, 204, 63, 167, 250};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test8)
{
    unsigned char msg[] = {49, 154, 8, 115, 206, 236, 233, 3, 227, 84, 69, 122, 219, 208, 190, 89, 0, 75, 213, 179, 20, 252, 45, 32, 239, 245, 18, 127, 34, 42, 227, 145, 113, 243, 198, 185, 225, 249, 84, 98, 148, 26, 227, 105, 30, 185, 31, 167, 150, 34, 69, 170, 11, 79};
    const unsigned msg_sz = 54;
    unsigned char r[] = {0, 110, 87, 124, 48, 152, 192, 1, 236};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test9)
{
    unsigned char msg[] = {49, 154, 8, 34, 206, 236, 233, 3, 227, 84, 69, 122, 219, 208, 190, 89, 0, 75, 213, 179, 20, 252, 45, 32, 239, 245, 18, 127, 34, 42, 227, 145, 113, 243, 198, 185, 225, 249, 84, 98, 148, 26, 227, 105, 30, 185, 31, 167, 150, 34, 69, 170, 11, 79};
    const unsigned msg_sz = 54;
    unsigned char r[] = {0, 63, 95, 84, 184, 10, 32, 70, 170};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test10)
{
    unsigned char msg[] = {49, 154, 8, 34, 206, 236, 233, 3, 227, 84, 69, 122, 219, 208, 190, 89, 0, 75, 213, 179, 20, 252, 132, 32, 239, 245, 18, 127, 34, 42, 227, 145, 113, 243, 198, 185, 225, 249, 84, 98, 148, 26, 227, 105, 30, 185, 31, 167, 150, 34, 69, 170, 11, 79};
    const unsigned msg_sz = 54;
    unsigned char r[] = {0, 150, 96, 217, 133, 26, 188, 39, 5};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test11)
{
    unsigned char msg[] = {159, 140, 6, 101, 120, 56, 158, 176, 119, 235, 201, 226, 189, 141, 246, 21, 105, 202, 73, 52, 211, 214, 47, 140, 248, 119, 240, 150, 254, 252, 87, 88, 1, 80, 68, 193, 182, 90, 64, 124, 208, 137, 255, 227, 17, 163, 175, 190, 213, 14, 62, 56, 84, 221, 190, 2, 132, 235, 211, 178, 73, 78, 41, 91, 36, 60, 134, 198, 124, 148, 84, 48, 159, 156, 90, 5, 92, 60, 89, 10, 77, 28, 182, 206, 83, 182, 196, 154, 134, 183, 188, 21, 114, 24, 27, 188, 110, 193, 192, 250, 118, 116, 198, 43, 150, 35, 160, 61, 121, 204, 91, 251, 69, 45, 241, 62, 127, 195, 82, 137, 84, 0, 232, 174, 109, 118, 220, 247, 242, 255, 238, 246, 11, 209, 63, 204, 123, 18, 206, 149, 188, 101, 164, 126, 231, 1, 240, 166, 101, 157, 184, 119, 122, 67, 190, 91, 201, 20, 143, 3, 39, 123, 123, 69, 189, 116, 234, 147, 65, 37, 53, 77, 0, 0, 202, 47, 93, 63};
    const unsigned msg_sz = 178;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test12)
{
    unsigned char msg[] = {159, 140, 6, 101, 120, 56, 158, 176, 119, 235, 201, 226, 189, 141, 246, 21, 105, 202, 73, 52, 211, 214, 47, 140, 248, 119, 240, 150, 254, 252, 87, 88, 1, 80, 68, 193, 182, 90, 64, 124, 208, 137, 255, 227, 17, 163, 175, 190, 213, 14, 62, 56, 84, 221, 190, 2, 132, 235, 211, 178, 73, 78, 41, 91, 36, 60, 134, 198, 124, 148, 84, 48, 159, 156, 90, 5, 92, 60, 89, 10, 77, 28, 182, 206, 83, 182, 196, 154, 134, 183, 188, 21, 114, 24, 27, 188, 110, 193, 192, 250, 118, 116, 198, 43, 150, 35, 160, 61, 121, 204, 91, 251, 69, 45, 241, 62, 127, 195, 82, 137, 84, 0, 168, 174, 109, 118, 220, 247, 242, 255, 238, 246, 11, 209, 63, 204, 123, 18, 206, 149, 188, 101, 164, 126, 231, 1, 240, 166, 101, 157, 184, 119, 122, 67, 190, 91, 201, 20, 143, 3, 39, 123, 123, 69, 189, 116, 234, 147, 65, 37, 53, 77, 0, 0, 202, 47, 93, 63};
    const unsigned msg_sz = 178;
    unsigned char r[] = {0, 64, 111, 248, 179, 72, 6, 231, 79};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test13)
{
    unsigned char msg[] = {159, 140, 6, 101, 120, 56, 158, 176, 119, 235, 201, 226, 189, 141, 246, 21, 105, 202, 73, 52, 211, 214, 47, 140, 248, 119, 240, 150, 254, 252, 87, 88, 1, 80, 68, 193, 182, 90, 64, 124, 208, 137, 255, 227, 17, 163, 175, 190, 213, 14, 62, 56, 84, 221, 190, 2, 132, 235, 211, 178, 73, 78, 41, 91, 36, 60, 134, 198, 124, 148, 84, 48, 159, 156, 90, 5, 92, 60, 89, 10, 77, 28, 182, 206, 83, 182, 196, 154, 134, 183, 188, 21, 114, 24, 27, 188, 110, 193, 192, 250, 118, 116, 198, 43, 150, 35, 160, 61, 121, 204, 91, 251, 69, 45, 241, 62, 127, 195, 82, 137, 84, 128, 168, 174, 109, 118, 220, 247, 242, 255, 238, 246, 11, 209, 63, 204, 123, 18, 206, 149, 188, 101, 164, 126, 231, 1, 240, 166, 101, 157, 184, 119, 122, 67, 190, 91, 201, 20, 143, 3, 39, 123, 123, 69, 189, 116, 234, 147, 65, 37, 53, 77, 0, 0, 202, 47, 93, 63};
    const unsigned msg_sz = 178;
    unsigned char r[] = {0, 192, 206, 107, 76, 189, 155, 25, 231};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test14)
{
    unsigned char msg[] = {159, 140, 6, 101, 120, 56, 158, 176, 119, 235, 201, 226, 189, 141, 246, 21, 105, 202, 73, 52, 211, 214, 47, 140, 248, 119, 240, 150, 254, 252, 87, 88, 1, 80, 68, 193, 182, 90, 64, 124, 208, 137, 255, 227, 17, 163, 175, 190, 213, 14, 62, 56, 84, 221, 190, 2, 132, 235, 211, 178, 73, 78, 41, 91, 36, 60, 134, 198, 124, 148, 84, 48, 159, 156, 90, 5, 92, 60, 89, 10, 77, 28, 182, 206, 83, 182, 161, 154, 134, 183, 188, 21, 114, 24, 27, 188, 110, 193, 192, 250, 118, 116, 198, 43, 150, 35, 160, 61, 121, 204, 91, 251, 69, 45, 241, 62, 127, 195, 82, 137, 84, 128, 168, 174, 109, 118, 220, 247, 242, 255, 238, 246, 11, 209, 63, 204, 123, 18, 206, 149, 188, 101, 164, 126, 231, 1, 240, 166, 101, 157, 184, 119, 122, 67, 190, 91, 201, 20, 143, 3, 39, 123, 123, 69, 189, 116, 234, 147, 65, 37, 53, 77, 0, 0, 202, 47, 93, 63};
    const unsigned msg_sz = 178;
    unsigned char r[] = {0, 165, 173, 229, 147, 140, 3, 201, 233};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test15)
{
    unsigned char msg[] = {159, 140, 6, 101, 120, 56, 158, 176, 119, 235, 201, 226, 189, 141, 246, 21, 105, 202, 73, 52, 211, 214, 47, 140, 248, 119, 240, 150, 254, 252, 87, 88, 1, 80, 68, 193, 182, 90, 64, 124, 208, 137, 255, 227, 17, 163, 175, 190, 213, 14, 62, 56, 84, 221, 190, 2, 132, 235, 211, 178, 73, 78, 41, 91, 36, 60, 134, 198, 124, 148, 84, 48, 159, 156, 90, 5, 92, 60, 89, 10, 77, 28, 182, 206, 83, 182, 161, 154, 134, 183, 188, 21, 114, 24, 27, 188, 110, 193, 192, 250, 118, 116, 198, 43, 150, 35, 160, 61, 121, 204, 91, 251, 69, 45, 241, 205, 127, 195, 82, 137, 84, 128, 168, 174, 109, 118, 220, 247, 242, 255, 238, 246, 11, 209, 63, 204, 123, 18, 206, 149, 188, 101, 164, 126, 231, 1, 240, 166, 101, 157, 184, 119, 122, 67, 190, 91, 201, 20, 143, 3, 39, 123, 123, 69, 189, 116, 234, 147, 65, 37, 53, 77, 0, 0, 202, 47, 93, 63};
    const unsigned msg_sz = 178;
    unsigned char r[] = {0, 86, 199, 161, 85, 196, 36, 43, 60};
    const unsigned r_sz = 9;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 8, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test16)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 131, 47, 54, 22, 146, 197, 78, 184, 96, 15, 230, 170, 10, 203, 63, 8, 167, 130, 14, 116, 68, 74, 182, 104, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test17)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 131, 47, 54, 22, 146, 197, 78, 184, 96, 15, 230, 170, 10, 203, 63, 8, 167, 130, 14, 116, 68, 74, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 59, 151, 133, 184, 79, 132, 168, 82, 73, 228, 230, 198, 252, 123, 227, 150};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test18)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 131, 47, 54, 22, 146, 197, 78, 184, 96, 15, 230, 170, 230, 203, 63, 8, 167, 130, 14, 116, 68, 74, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 215, 9, 204, 198, 45, 9, 209, 194, 249, 224, 126, 91, 223, 165, 223, 205};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test19)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 131, 47, 54, 22, 146, 197, 78, 184, 96, 15, 230, 170, 230, 203, 63, 8, 167, 130, 14, 71, 68, 74, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 228, 100, 217, 98, 248, 152, 39, 243, 174, 109, 217, 169, 154, 223, 84, 36};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test20)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 131, 47, 54, 22, 146, 197, 78, 184, 96, 77, 230, 170, 230, 203, 63, 8, 167, 130, 14, 71, 68, 74, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 166, 177, 38, 123, 74, 226, 164, 135, 182, 242, 134, 122, 139, 24, 27, 29};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test21)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 131, 47, 54, 22, 79, 197, 78, 184, 96, 77, 230, 170, 230, 203, 63, 8, 167, 130, 14, 71, 68, 74, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 123, 33, 74, 86, 158, 189, 219, 224, 219, 22, 205, 10, 175, 3, 87, 40};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test22)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 207, 47, 54, 22, 79, 197, 78, 184, 96, 77, 230, 170, 230, 203, 63, 8, 167, 130, 14, 71, 68, 74, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 55, 86, 20, 249, 9, 23, 112, 71, 44, 6, 13, 99, 121, 130, 21, 23};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test23)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 207, 162, 54, 22, 79, 197, 78, 184, 96, 77, 230, 170, 230, 203, 63, 8, 167, 130, 14, 71, 68, 74, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 186, 95, 34, 77, 150, 114, 51, 208, 121, 229, 125, 94, 247, 129, 31, 43};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test24)
{
    unsigned char msg[] = {40, 53, 113, 45, 64, 207, 162, 54, 22, 79, 197, 78, 184, 96, 77, 230, 170, 230, 203, 63, 8, 167, 130, 14, 71, 68, 65, 182, 83, 212, 81, 87, 164};
    const unsigned msg_sz = 33;
    unsigned char r[] = {0, 177, 165, 78, 79, 22, 245, 105, 211, 185, 175, 10, 210, 87, 238, 221, 225};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test25)
{
    unsigned char msg[] = {109, 95, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 250, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 191, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 208, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 222, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 22, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 188, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test26)
{
    unsigned char msg[] = {109, 95, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 250, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 191, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 222, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 22, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 188, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 172, 225, 242, 211, 83, 15, 14, 153, 130, 111, 55, 80, 171, 35, 179, 106};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test27)
{
    unsigned char msg[] = {109, 95, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 250, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 191, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 136, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 22, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 188, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 250, 65, 104, 88, 153, 201, 15, 58, 224, 66, 138, 76, 142, 239, 152, 58};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test28)
{
    unsigned char msg[] = {109, 95, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 56, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 191, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 136, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 22, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 188, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 56, 187, 87, 166, 237, 21, 178, 250, 177, 108, 158, 54, 36, 37, 244, 65};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test29)
{
    unsigned char msg[] = {109, 20, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 56, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 191, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 136, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 22, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 188, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 115, 40, 133, 40, 223, 207, 59, 233, 19, 200, 127, 6, 54, 227, 249, 175};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test30)
{
    unsigned char msg[] = {109, 20, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 56, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 191, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 136, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 22, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 139, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 68, 112, 48, 107, 230, 150, 211, 43, 214, 131, 148, 35, 109, 177, 36, 143};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test31)
{
    unsigned char msg[] = {109, 20, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 56, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 191, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 136, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 168, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 139, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 250, 90, 102, 191, 33, 242, 75, 90, 101, 152, 202, 10, 127, 46, 225, 147};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test32)
{
    unsigned char msg[] = {109, 20, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 56, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 215, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 136, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 168, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 139, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 156, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 146, 71, 160, 1, 100, 30, 130, 17, 152, 83, 84, 158, 77, 204, 57, 218};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test33)
{
    unsigned char msg[] = {109, 20, 25, 114, 83, 219, 191, 137, 229, 125, 4, 26, 172, 49, 106, 88, 114, 126, 150, 56, 97, 203, 188, 183, 109, 68, 217, 215, 99, 144, 13, 91, 2, 214, 161, 44, 215, 125, 77, 201, 215, 219, 40, 242, 22, 1, 29, 0, 153, 74, 58, 253, 172, 230, 62, 47, 184, 184, 205, 175, 230, 37, 125, 44, 188, 150, 180, 109, 170, 135, 121, 41, 124, 121, 144, 37, 237, 136, 115, 110, 134, 16, 143, 149, 84, 119, 156, 98, 69, 244, 201, 240, 77, 130, 28, 150, 172, 186, 29, 167, 188, 51, 154, 174, 152, 136, 51, 179, 33, 171, 229, 199, 61, 112, 31, 41, 25, 56, 22, 168, 90, 33, 197, 223, 127, 15, 188, 134, 217, 150, 143, 108, 70, 3, 186, 126, 123, 244, 236, 74, 139, 228, 175, 208, 56, 252, 116, 182, 153, 206, 189, 68, 84, 213, 54, 15, 160, 178, 73, 172, 233, 244, 176, 189, 214, 239, 224, 199, 148, 206, 87, 83, 8, 84, 126, 195, 95, 99, 186, 231, 212, 68, 47, 236, 28, 85, 173, 216, 173, 154, 92, 106, 71, 135, 185, 45, 243};
    const unsigned msg_sz = 197;
    unsigned char r[] = {0, 192, 184, 208, 123, 102, 6, 34, 194, 37, 28, 55, 48, 214, 54, 117, 173};
    const unsigned r_sz = 17;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 16, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test34)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 142, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 232, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 214, 9, 78, 75, 34, 28, 197, 144, 176, 99, 235, 227, 33, 232, 201, 112, 115, 53, 5, 132, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test35)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 232, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 214, 9, 78, 75, 34, 28, 197, 144, 176, 99, 235, 227, 33, 232, 201, 112, 115, 53, 5, 132, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 53, 229, 238, 241, 140, 75, 80, 149, 210, 87, 95, 50, 47, 14, 137, 221, 240, 162, 107, 249, 225, 86, 113, 18, 134, 122, 13, 251, 189, 22, 62, 250};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test36)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 232, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 214, 9, 78, 75, 34, 28, 197, 144, 176, 174, 235, 227, 33, 232, 201, 112, 115, 53, 5, 132, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 248, 163, 133, 202, 104, 201, 109, 175, 19, 176, 178, 160, 120, 42, 201, 104, 136, 156, 62, 151, 107, 94, 68, 29, 72, 83, 201, 173, 188, 51, 91, 42};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test37)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 232, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 214, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 201, 112, 115, 53, 5, 132, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 126, 61, 122, 56, 176, 135, 8, 200, 65, 222, 160, 32, 185, 145, 191, 27, 5, 119, 19, 202, 26, 230, 147, 76, 135, 99, 11, 183, 232, 2, 13, 46};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test38)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 232, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 214, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 201, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 167, 209, 40, 201, 172, 207, 165, 1, 205, 209, 130, 236, 43, 218, 24, 238, 1, 111, 67, 55, 46, 94, 36, 217, 222, 168, 139, 144, 58, 212, 195, 176};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test39)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 214, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 201, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 220, 221, 182, 74, 232, 182, 103, 218, 80, 251, 47, 132, 176, 191, 122, 164, 40, 107, 194, 189, 18, 130, 145, 144, 94, 69, 27, 67, 184, 247, 22, 125};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test40)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 214, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 20, 77, 190, 4, 86, 111, 171, 109, 7, 87, 247, 136, 217, 94, 65, 14, 74, 153, 56, 9, 24, 81, 142, 56, 161, 22, 144, 196, 86, 248, 34, 227};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test41)
{
    unsigned char msg[] = {169, 113, 97, 25, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 208, 112, 147, 165, 134, 253, 172, 16, 32, 47, 50, 116, 43, 86, 7, 184, 107, 93, 5, 36, 185, 129, 28, 63, 220, 49, 232, 1, 170, 10, 42, 165};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test42)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 83, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 82, 46, 115, 66, 127, 166, 136, 152, 235, 17, 177, 71, 35, 25, 20, 145, 104, 234, 32, 193, 154, 23, 117, 126, 243, 65, 21, 243, 9, 24, 110, 78};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test43)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 210, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 149, 0, 89, 123, 64, 13, 38, 232, 18, 89, 186, 43, 163, 67, 212, 230, 200, 40, 208, 98, 18, 107, 185, 60, 89, 34, 234, 47, 7, 170, 103, 165};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test44)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 177, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 129, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 198, 172, 162, 96, 192, 120, 186, 100, 179, 101, 25, 49, 48, 46, 253, 55, 55, 127, 48, 249, 231, 130, 169, 17, 196, 189, 83, 166, 249, 238, 159, 139};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test45)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 33, 2, 152, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 129, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 239, 87, 195, 242, 236, 29, 201, 171, 203, 244, 180, 90, 131, 38, 34, 236, 13, 166, 244, 223, 163, 213, 220, 193, 160, 177, 109, 158, 222, 213, 57, 190};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test46)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 17, 2, 177, 2, 152, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 129, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 127, 56, 150, 228, 38, 162, 17, 125, 58, 233, 27, 52, 55, 155, 37, 113, 123, 255, 26, 178, 41, 136, 145, 58, 57, 100, 162, 99, 59, 221, 98, 143};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test47)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 93, 2, 177, 2, 152, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 43, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 129, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 51, 80, 145, 170, 21, 97, 5, 41, 193, 183, 202, 153, 201, 208, 3, 69, 246, 216, 141, 93, 35, 162, 98, 21, 223, 188, 221, 200, 40, 199, 170, 18};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test48)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 93, 2, 177, 2, 152, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 92, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 129, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 68, 44, 77, 186, 11, 51, 169, 99, 124, 134, 141, 199, 227, 41, 195, 205, 9, 91, 210, 18, 114, 161, 205, 240, 135, 213, 243, 184, 114, 100, 201, 249};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test49)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 93, 2, 177, 2, 19, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 161, 29, 130, 87, 92, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 129, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 207, 3, 169, 199, 4, 140, 159, 132, 128, 135, 242, 54, 163, 159, 85, 0, 143, 53, 255, 8, 240, 46, 3, 247, 231, 56, 46, 157, 183, 61, 124, 238};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test50)
{
    unsigned char msg[] = {169, 113, 97, 155, 7, 84, 187, 160, 7, 147, 150, 226, 102, 13, 63, 247, 69, 184, 92, 245, 226, 141, 98, 47, 10, 200, 147, 15, 227, 79, 255, 222, 178, 19, 130, 74, 86, 80, 248, 253, 59, 198, 209, 162, 202, 93, 2, 177, 2, 19, 206, 117, 32, 57, 158, 187, 29, 175, 104, 126, 104, 29, 130, 87, 92, 101, 78, 57, 221, 69, 102, 157, 150, 32, 247, 37, 223, 107, 251, 129, 153, 220, 217, 104, 96, 85, 149, 236, 164, 195, 4, 18, 9, 78, 75, 34, 28, 197, 22, 176, 174, 235, 227, 33, 232, 1, 112, 115, 53, 5, 93, 35, 245, 23, 21, 174, 175, 194, 156, 52, 174, 78, 129, 115, 148, 253, 255, 112, 125, 176, 103, 6, 19, 59, 220, 125, 169};
    const unsigned msg_sz = 137;
    unsigned char r[] = {0, 6, 133, 86, 31, 97, 222, 141, 69, 246, 10, 223, 71, 116, 80, 151, 84, 217, 95, 7, 138, 119, 207, 146, 175, 57, 25, 215, 1, 121, 225, 97, 133};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test51)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 139, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 94, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 30, 49, 252, 129, 182, 46, 75, 141, 228, 52, 10, 122, 192, 107, 32, 66, 80, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 106, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 49, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test52)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 139, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 94, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 30, 49, 252, 129, 182, 46, 75, 141, 228, 52, 10, 122, 192, 107, 32, 66, 80, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 106, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 170, 179, 65, 178, 245, 216, 76, 37, 93, 30, 217, 248, 79, 228, 227, 200, 195, 203, 2, 117, 212, 111, 231, 34, 118, 21, 209, 49, 56, 69, 88, 64};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test53)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 139, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 94, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 30, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 80, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 106, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 21, 30, 62, 105, 56, 156, 206, 41, 176, 184, 108, 64, 197, 94, 202, 67, 166, 116, 175, 10, 15, 162, 163, 160, 122, 248, 119, 132, 128, 207, 226, 105};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test54)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 139, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 94, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 80, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 106, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 212, 11, 181, 17, 201, 186, 0, 143, 246, 16, 64, 167, 30, 115, 244, 26, 172, 93, 210, 97, 153, 215, 78, 82, 42, 173, 184, 251, 68, 64, 217, 170};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test55)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 139, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 94, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 106, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 196, 96, 115, 235, 230, 30, 122, 223, 44, 233, 117, 52, 16, 252, 249, 143, 150, 188, 55, 87, 16, 238, 181, 128, 104, 251, 86, 108, 153, 112, 100, 253};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test56)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 139, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 156, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 106, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 6, 147, 219, 75, 163, 166, 13, 125, 23, 41, 248, 228, 74, 203, 32, 15, 96, 215, 91, 134, 117, 229, 17, 57, 32, 101, 16, 149, 170, 85, 20, 226};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test57)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 139, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 156, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 140, 163, 120, 217, 76, 76, 102, 231, 70, 15, 196, 166, 114, 214, 126, 183, 82, 213, 250, 181, 169, 211, 76, 254, 182, 213, 156, 91, 92, 190, 161, 239};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test58)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 156, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 46, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 57, 239, 145, 143, 85, 50, 115, 155, 167, 174, 142, 78, 94, 47, 219, 8, 29, 178, 145, 220, 52, 147, 167, 92, 114, 0, 192, 65, 172, 150, 173, 237};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test59)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 156, 74, 187, 253, 207, 225, 196, 158, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 82, 77, 97, 82, 220, 60, 92, 169, 248, 249, 92, 219, 14, 100, 87, 249, 243, 87, 164, 26, 122, 224, 151, 101, 253, 164, 154, 233, 191, 212, 151, 55};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test60)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 108, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 34, 121, 21, 183, 22, 203, 19, 195, 246, 113, 220, 228, 80, 30, 58, 179, 59, 70, 180, 121, 184, 168, 185, 43, 228, 11, 152, 15, 224, 221, 91, 247};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test61)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 13, 75, 42, 172, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 67, 40, 247, 60, 129, 35, 129, 169, 148, 94, 110, 167, 124, 210, 41, 87, 76, 113, 209, 128, 154, 213, 151, 179, 151, 148, 61, 0, 123, 208, 148, 154};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test62)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 23, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 13, 75, 42, 149, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 122, 188, 44, 83, 157, 72, 136, 193, 91, 112, 125, 53, 54, 49, 144, 89, 247, 251, 229, 105, 141, 82, 222, 150, 104, 70, 58, 211, 62, 202, 110, 31};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test63)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 202, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 13, 75, 42, 149, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 137, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 167, 81, 76, 84, 83, 199, 10, 219, 118, 30, 251, 248, 160, 135, 208, 168, 136, 250, 25, 142, 187, 237, 209, 235, 140, 105, 177, 134, 159, 63, 198, 165};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test64)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 202, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 13, 75, 42, 149, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 45, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 209, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 255, 44, 165, 215, 101, 31, 77, 218, 114, 14, 187, 229, 212, 74, 195, 228, 165, 78, 243, 1, 189, 245, 177, 118, 194, 76, 37, 236, 42, 209, 89, 227};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test65)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 113, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 202, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 13, 75, 42, 149, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 254, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 209, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 44, 145, 234, 180, 203, 132, 183, 150, 5, 80, 20, 114, 126, 225, 100, 19, 181, 142, 154, 215, 60, 183, 142, 111, 110, 207, 127, 115, 224, 192, 149, 218};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test66)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 139, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 202, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 13, 75, 42, 149, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 41, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 254, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 209, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 214, 218, 212, 56, 221, 117, 10, 120, 254, 181, 25, 71, 4, 39, 226, 93, 167, 253, 235, 231, 106, 142, 111, 224, 151, 107, 20, 41, 66, 104, 101, 201};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test67)
{
    unsigned char msg[] = {20, 198, 237, 87, 28, 170, 68, 145, 180, 63, 47, 148, 165, 92, 216, 244, 119, 189, 62, 168, 41, 226, 88, 45, 150, 147, 182, 204, 82, 147, 55, 198, 56, 51, 216, 241, 52, 83, 189, 225, 204, 70, 237, 83, 175, 31, 126, 183, 224, 180, 25, 85, 1, 98, 244, 234, 234, 139, 38, 93, 89, 169, 19, 109, 141, 100, 4, 85, 57, 44, 101, 70, 49, 28, 69, 182, 30, 220, 74, 202, 167, 156, 74, 187, 253, 207, 225, 196, 238, 174, 61, 19, 58, 210, 218, 250, 127, 128, 199, 223, 37, 171, 238, 20, 74, 13, 75, 42, 149, 10, 143, 175, 29, 27, 166, 189, 130, 225, 149, 174, 91, 246, 69, 168, 51, 155, 26, 211, 64, 186, 97, 85, 201, 93, 158, 254, 31, 226, 248, 162, 241, 29, 117, 198, 166, 233, 234, 1, 243, 168, 39, 223, 49, 252, 129, 182, 46, 244, 141, 228, 52, 10, 122, 192, 107, 32, 66, 64, 169, 40, 127, 12, 84, 2, 207, 44, 105, 178, 209, 32, 57, 104, 99, 130, 148, 224, 122, 41, 159, 132, 96, 193, 41, 209, 32, 95, 152, 12, 13, 5, 145, 16, 213, 17, 64, 210, 156, 206, 162, 135, 249, 77, 107, 93, 204, 121, 63, 213, 241, 225, 254, 112, 38, 0, 27, 138, 112, 155, 173, 53, 223, 21, 0, 60, 226, 237, 246, 118, 2, 159, 145, 97, 237, 55, 207, 209, 231, 139};
    const unsigned msg_sz = 248;
    unsigned char r[] = {0, 96, 147, 102, 30, 84, 24, 136, 160, 94, 139, 239, 176, 33, 197, 219, 175, 63, 227, 66, 213, 45, 52, 151, 31, 108, 255, 187, 205, 173, 50, 29, 87};
    const unsigned r_sz = 33;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 32, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test68)
{
    unsigned char msg[] = {245, 174, 218, 10, 238, 156, 249, 53, 45, 44, 189, 69, 172, 174, 113, 65, 72, 91, 23, 168, 151, 118, 68, 9, 60, 166, 30, 200, 201, 182, 160, 228, 25, 117, 238, 113, 49, 206, 235, 134, 254, 92, 109, 56, 101, 96, 8, 176, 166, 167, 93, 71, 198, 202, 234, 208, 49, 215, 186, 216, 88, 199, 119, 227};
    const unsigned msg_sz = 64;
    unsigned char r[] = {0, 0};
    const unsigned r_sz = 2;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 1, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test69)
{
    unsigned char msg[] = {221, 155, 29, 107, 95, 11, 26, 180, 168, 1, 129, 220, 175, 56, 140, 31, 69, 69, 198, 81, 51, 97, 176, 173, 108, 96, 78, 14, 78, 255, 5, 165, 196, 165, 176, 72, 213, 249, 209, 239, 115, 41, 219, 134, 241, 56, 3, 211, 1, 29, 9, 179, 56, 148, 157, 204, 128, 120, 8, 235, 11, 210, 98, 160, 238, 222, 172, 28, 182, 38, 69, 28, 84, 191, 202, 119, 30, 112, 57, 128, 198, 72, 121, 254, 107, 106, 50, 231, 12, 82, 36, 255, 33, 158, 99, 106, 116, 30, 61};
    const unsigned msg_sz = 99;
    unsigned char r[] = {0, 0};
    const unsigned r_sz = 2;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 1, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test70)
{
    unsigned char msg[] = {87, 169, 236, 33, 112, 36, 241, 203, 215, 234, 106, 10};
    const unsigned msg_sz = 12;
    unsigned char r[] = {0, 0, 0, 0};
    const unsigned r_sz = 4;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 3, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test71)
{
    unsigned char msg[] = {87, 169, 236, 33, 112, 36, 241, 203, 215, 234, 106, 24};
    const unsigned msg_sz = 12;
    unsigned char r[] = {0, 18, 18, 18};
    const unsigned r_sz = 4;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 3, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test72)
{
    unsigned char msg[] = {213, 23, 197, 67, 24, 232, 118, 120, 214, 254, 102, 69, 229, 220, 73, 26, 144, 214, 177, 32, 4, 72, 153, 18, 31, 74, 67, 99, 216, 246, 209, 65};
    const unsigned msg_sz = 32;
    unsigned char r[] = {0, 0, 0, 0};
    const unsigned r_sz = 4;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 3, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test73)
{
    unsigned char msg[] = {213, 23, 197, 67, 24, 232, 118, 120, 214, 254, 102, 69, 229, 220, 73, 26, 144, 214, 177, 32, 4, 72, 153, 18, 31, 74, 67, 99, 216, 246, 125, 65};
    const unsigned msg_sz = 32;
    unsigned char r[] = {0, 172, 69, 138};
    const unsigned r_sz = 4;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 3, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test74)
{
    unsigned char msg[] = {36, 92, 66, 102, 238, 27, 78, 98, 147, 63, 227, 115, 106, 59, 17, 223, 89, 153, 66, 94, 69, 26, 195, 142, 80, 99, 108, 11, 30, 109, 168, 114, 21, 253, 215, 249, 80, 105, 111, 165, 102, 87, 182, 61, 3, 235, 101, 228, 18, 246, 83, 168, 142, 176, 41, 249, 188, 69, 159, 2, 18, 220, 209, 2, 10, 37, 22, 118, 55, 172, 39, 224, 37, 145, 254, 229, 56, 151, 50, 231, 140, 23, 89, 233, 63, 255, 47, 149, 19, 168, 44, 105, 1, 146, 37, 47, 154, 7, 199, 133, 14, 113, 68, 210, 112, 211, 154, 1, 175, 82, 64, 219, 98, 237, 129, 199, 140, 20, 215, 89, 248, 111, 169, 48, 231, 210, 80, 132, 195, 216, 152, 225, 64, 113, 30, 140, 24, 144, 217, 3, 18, 136, 167, 18, 250, 159, 208, 94, 186, 225, 161, 22, 131, 232, 60, 35, 15, 210, 123, 210, 242, 188, 57, 90, 236, 85, 19, 166, 160, 153, 121, 88, 225, 248, 224, 168, 52, 206, 255, 170, 71, 23, 124, 185, 138, 163, 191, 172};
    const unsigned msg_sz = 188;
    unsigned char r[] = {0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 6;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 5, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test75)
{
    unsigned char msg[] = {36, 92, 66, 102, 238, 27, 78, 98, 147, 63, 227, 115, 106, 59, 17, 223, 89, 153, 66, 94, 69, 26, 195, 142, 80, 99, 108, 11, 30, 109, 168, 114, 21, 253, 215, 249, 80, 105, 111, 165, 102, 87, 182, 61, 3, 235, 101, 228, 18, 246, 83, 168, 142, 176, 41, 249, 188, 69, 159, 2, 18, 220, 209, 2, 10, 37, 22, 118, 55, 172, 39, 224, 37, 145, 254, 229, 56, 151, 50, 231, 140, 23, 89, 233, 63, 255, 47, 149, 19, 168, 44, 105, 1, 146, 37, 47, 154, 7, 199, 133, 14, 113, 68, 210, 112, 211, 154, 1, 175, 82, 64, 219, 98, 237, 129, 199, 140, 20, 215, 89, 248, 111, 169, 48, 231, 210, 80, 132, 195, 216, 152, 225, 64, 113, 30, 140, 24, 8, 217, 3, 18, 136, 167, 18, 250, 159, 208, 94, 186, 225, 161, 22, 131, 232, 60, 35, 15, 210, 123, 210, 242, 188, 57, 90, 236, 85, 19, 166, 160, 153, 121, 88, 225, 248, 224, 168, 52, 206, 255, 170, 71, 23, 124, 185, 138, 163, 191, 172};
    const unsigned msg_sz = 188;
    unsigned char r[] = {0, 152, 194, 237, 126, 155};
    const unsigned r_sz = 6;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 5, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test76)
{
    unsigned char msg[] = {36, 92, 66, 102, 238, 27, 78, 98, 147, 63, 227, 115, 106, 59, 17, 223, 89, 153, 66, 94, 69, 26, 195, 142, 80, 99, 108, 11, 30, 109, 168, 114, 21, 253, 215, 249, 80, 105, 111, 165, 102, 87, 182, 61, 3, 235, 101, 228, 18, 246, 83, 168, 142, 176, 41, 249, 188, 69, 159, 2, 18, 220, 209, 2, 10, 37, 22, 118, 55, 172, 39, 224, 37, 145, 254, 229, 56, 151, 50, 231, 140, 23, 89, 233, 63, 255, 47, 149, 19, 168, 44, 105, 1, 146, 37, 47, 154, 7, 199, 133, 14, 113, 68, 210, 112, 211, 154, 1, 175, 82, 64, 219, 98, 237, 129, 199, 140, 20, 215, 89, 248, 111, 169, 48, 231, 210, 80, 132, 195, 216, 152, 225, 64, 113, 30, 140, 24, 8, 217, 3, 18, 136, 167, 18, 250, 159, 208, 94, 186, 225, 161, 22, 131, 232, 60, 35, 15, 210, 123, 210, 242, 188, 57, 90, 236, 85, 19, 166, 160, 153, 121, 88, 225, 248, 74, 168, 52, 206, 255, 170, 71, 23, 124, 185, 138, 163, 191, 172};
    const unsigned msg_sz = 188;
    unsigned char r[] = {0, 50, 4, 54, 208, 123};
    const unsigned r_sz = 6;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 5, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test77)
{
    unsigned char msg[] = {188, 10, 48, 113, 70, 173, 41, 186, 59, 196, 121, 216, 152, 125, 54, 133, 126, 212, 108, 85, 236, 144, 173, 61, 94, 167, 208, 140, 200, 91, 69, 61, 67, 48, 52, 47, 64, 49, 25, 66, 171, 165, 162, 194, 234, 174, 193, 96, 116, 191, 30, 25, 202, 225, 59, 184, 165, 213, 123, 216, 221, 9, 93, 227, 59, 203, 155, 105, 211, 22, 191, 136, 30, 188, 153, 110, 162, 176, 145, 185, 159, 251, 109, 129, 245, 42, 8, 250, 128, 125, 50, 162, 118, 59, 119, 41, 216, 8, 55, 250, 235, 16, 145, 242, 21, 110, 61, 251, 167, 124, 154, 210, 44, 83, 157, 205, 26, 246, 253, 37, 47, 91, 41, 30, 201, 60, 195, 98, 175, 202, 7, 102, 207, 120, 230, 201, 133, 102, 78, 138, 168, 176, 151, 210, 30, 228, 24, 134, 142, 25, 29, 46, 105, 152, 104, 174, 238, 215, 129, 96, 203, 40, 129, 70, 57, 50, 159, 196, 148, 224, 123, 199, 219, 65, 176, 201, 98, 13, 117, 167, 228, 71, 150, 188, 183, 216, 250, 33, 148, 32, 26, 114, 159, 52, 241, 97, 82, 53, 190, 171, 218, 235, 72, 83, 67, 167, 47, 22, 97, 205, 146, 196, 113, 57, 156, 93, 130, 151, 223, 118, 181, 215, 130, 122, 132, 236, 44, 206, 171, 42, 69, 57, 143, 101, 201, 23, 35};
    const unsigned msg_sz = 237;
    unsigned char r[] = {0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 6;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 5, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test78)
{
    unsigned char msg[] = {188, 10, 48, 113, 70, 173, 41, 186, 59, 196, 121, 216, 152, 125, 54, 133, 126, 212, 108, 85, 236, 144, 173, 61, 94, 167, 208, 140, 200, 91, 69, 61, 67, 48, 52, 47, 64, 49, 25, 66, 171, 165, 162, 194, 234, 174, 193, 96, 116, 191, 30, 25, 202, 225, 59, 184, 165, 213, 123, 216, 221, 9, 93, 227, 59, 203, 155, 105, 211, 22, 191, 136, 30, 188, 153, 110, 162, 176, 145, 185, 159, 251, 109, 129, 245, 42, 8, 250, 128, 125, 50, 162, 118, 59, 119, 41, 216, 8, 55, 250, 235, 16, 145, 242, 21, 110, 61, 251, 167, 124, 154, 210, 44, 83, 157, 205, 26, 246, 253, 37, 47, 91, 41, 30, 201, 60, 195, 98, 175, 202, 7, 102, 207, 120, 230, 201, 133, 102, 139, 138, 168, 176, 151, 210, 30, 228, 24, 134, 142, 25, 29, 46, 105, 152, 104, 174, 238, 215, 129, 96, 203, 40, 129, 70, 57, 50, 159, 196, 148, 224, 123, 199, 219, 65, 176, 201, 98, 13, 117, 167, 228, 71, 150, 188, 183, 216, 250, 33, 148, 32, 26, 114, 159, 52, 241, 97, 82, 53, 190, 171, 218, 235, 72, 83, 67, 167, 47, 22, 97, 205, 146, 196, 113, 57, 156, 93, 130, 151, 223, 118, 181, 215, 130, 122, 132, 236, 44, 206, 171, 42, 69, 57, 143, 101, 201, 23, 35};
    const unsigned msg_sz = 237;
    unsigned char r[] = {0, 197, 69, 95, 191, 32};
    const unsigned r_sz = 6;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 5, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test79)
{
    unsigned char msg[] = {188, 10, 48, 113, 70, 173, 41, 186, 59, 196, 121, 216, 152, 125, 54, 133, 126, 212, 108, 85, 236, 144, 173, 61, 94, 167, 208, 140, 200, 91, 69, 61, 67, 48, 52, 47, 64, 49, 25, 66, 171, 165, 162, 194, 234, 174, 193, 96, 116, 191, 30, 25, 202, 225, 59, 184, 165, 213, 123, 216, 221, 9, 61, 227, 59, 203, 155, 105, 211, 22, 191, 136, 30, 188, 153, 110, 162, 176, 145, 185, 159, 251, 109, 129, 245, 42, 8, 250, 128, 125, 50, 162, 118, 59, 119, 41, 216, 8, 55, 250, 235, 16, 145, 242, 21, 110, 61, 251, 167, 124, 154, 210, 44, 83, 157, 205, 26, 246, 253, 37, 47, 91, 41, 30, 201, 60, 195, 98, 175, 202, 7, 102, 207, 120, 230, 201, 133, 102, 139, 138, 168, 176, 151, 210, 30, 228, 24, 134, 142, 25, 29, 46, 105, 152, 104, 174, 238, 215, 129, 96, 203, 40, 129, 70, 57, 50, 159, 196, 148, 224, 123, 199, 219, 65, 176, 201, 98, 13, 117, 167, 228, 71, 150, 188, 183, 216, 250, 33, 148, 32, 26, 114, 159, 52, 241, 97, 82, 53, 190, 171, 218, 235, 72, 83, 67, 167, 47, 22, 97, 205, 146, 196, 113, 57, 156, 93, 130, 151, 223, 118, 181, 215, 130, 122, 132, 236, 44, 206, 171, 42, 69, 57, 143, 101, 201, 23, 35};
    const unsigned msg_sz = 237;
    unsigned char r[] = {0, 165, 152, 154, 10, 227};
    const unsigned r_sz = 6;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 5, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test80)
{
    unsigned char msg[] = {15, 186, 189, 112, 250, 54, 138, 59, 124, 161, 227, 157, 212, 115, 164, 153, 81, 205, 161, 104, 181, 151, 213, 249, 199, 169, 185, 11, 243, 133, 159, 197, 236, 54, 217, 26, 76, 249, 168, 146, 17, 123, 154, 130, 7, 87, 190, 229, 174, 176, 102};
    const unsigned msg_sz = 51;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test81)
{
    unsigned char msg[] = {15, 186, 189, 112, 250, 54, 138, 59, 124, 161, 227, 157, 212, 115, 164, 153, 81, 205, 161, 104, 181, 151, 213, 249, 199, 169, 185, 11, 243, 133, 159, 197, 236, 54, 217, 26, 76, 249, 168, 146, 17, 123, 154, 130, 209, 87, 190, 229, 174, 176, 102};
    const unsigned msg_sz = 51;
    unsigned char r[] = {0, 214, 163, 175, 136, 189, 124, 118};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test82)
{
    unsigned char msg[] = {15, 186, 189, 112, 250, 54, 138, 59, 124, 161, 227, 157, 26, 115, 164, 153, 81, 205, 161, 104, 181, 151, 213, 249, 199, 169, 185, 11, 243, 133, 159, 197, 236, 54, 217, 26, 76, 249, 168, 146, 17, 123, 154, 130, 209, 87, 190, 229, 174, 176, 102};
    const unsigned msg_sz = 51;
    unsigned char r[] = {0, 24, 7, 115, 172, 160, 227, 29};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test83)
{
    unsigned char msg[] = {15, 186, 189, 112, 250, 54, 138, 59, 124, 161, 227, 157, 26, 115, 164, 153, 81, 205, 161, 104, 181, 151, 213, 249, 199, 169, 185, 11, 127, 133, 159, 197, 236, 54, 217, 26, 76, 249, 168, 146, 17, 123, 154, 130, 209, 87, 190, 229, 174, 176, 102};
    const unsigned msg_sz = 51;
    unsigned char r[] = {0, 148, 187, 197, 208, 62, 144, 44};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test84)
{
    unsigned char msg[] = {4, 15, 148, 165, 181, 23, 210, 228, 102, 196, 175, 11, 79, 236, 206, 86, 172, 211, 202, 64, 104, 103, 130, 240, 205, 209, 40, 189, 57, 11, 139, 142, 3, 8, 176, 237, 159, 101, 27, 128, 91, 204, 244, 240, 59, 125, 129, 213, 231, 49, 69, 157, 178, 68, 149, 128, 57, 241, 23, 66, 204, 48, 18, 72, 236, 176, 125, 90, 158, 140, 48, 57, 24, 210, 206, 199, 255, 211, 249, 213, 157, 68, 203, 1, 185, 104, 100, 136, 243, 223, 114, 123, 109, 26, 9, 57, 27, 50, 10, 196, 240, 48, 100, 18, 167, 40, 247, 30, 173, 191, 183, 142, 45, 24, 140, 78, 128, 46, 219, 53, 156, 97, 146, 113, 57, 55, 75, 1, 109, 243, 109, 219, 193, 98, 185, 147, 42, 120, 231, 146, 37, 1, 150, 199, 224, 128, 242, 196, 197, 16, 196, 195, 120, 52, 232, 131, 180, 69, 92, 87, 54, 119, 146, 152, 139, 120, 190, 21, 103, 158, 87, 1, 19, 255, 147, 106, 173, 132, 189, 180, 7, 160, 172, 246, 124, 158, 150, 176, 47, 230, 72, 17, 208, 75, 170, 242, 108, 84, 170};
    const unsigned msg_sz = 199;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test85)
{
    unsigned char msg[] = {4, 15, 148, 165, 181, 23, 210, 228, 102, 196, 175, 11, 79, 236, 206, 86, 172, 211, 202, 64, 104, 103, 130, 240, 205, 209, 40, 189, 57, 11, 139, 142, 3, 8, 176, 237, 159, 101, 27, 128, 91, 204, 244, 240, 59, 125, 129, 213, 231, 49, 69, 157, 178, 68, 149, 128, 57, 241, 23, 66, 204, 48, 18, 72, 236, 176, 125, 90, 158, 140, 48, 57, 24, 210, 206, 199, 255, 211, 249, 213, 157, 68, 203, 1, 185, 104, 100, 136, 243, 223, 114, 123, 109, 26, 9, 57, 27, 50, 10, 196, 240, 48, 100, 18, 167, 40, 247, 30, 173, 191, 183, 142, 45, 24, 140, 78, 128, 46, 219, 53, 156, 97, 146, 113, 57, 55, 75, 1, 109, 243, 109, 219, 193, 98, 185, 147, 42, 120, 231, 146, 37, 1, 150, 199, 224, 128, 242, 196, 197, 16, 196, 195, 120, 52, 174, 131, 180, 69, 92, 87, 54, 119, 146, 152, 139, 120, 190, 21, 103, 158, 87, 1, 19, 255, 147, 106, 173, 132, 189, 180, 7, 160, 172, 246, 124, 158, 150, 176, 47, 230, 72, 17, 208, 75, 170, 242, 108, 84, 170};
    const unsigned msg_sz = 199;
    unsigned char r[] = {0, 70, 91, 79, 150, 18, 135, 186};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test86)
{
    unsigned char msg[] = {4, 15, 148, 165, 181, 23, 210, 228, 102, 196, 175, 11, 79, 236, 206, 86, 172, 211, 202, 64, 104, 103, 130, 240, 205, 209, 40, 189, 57, 11, 139, 142, 3, 8, 176, 237, 159, 101, 27, 128, 91, 204, 244, 240, 59, 125, 129, 213, 231, 49, 69, 157, 178, 68, 149, 128, 57, 241, 23, 66, 204, 48, 18, 72, 236, 176, 125, 90, 158, 140, 48, 57, 24, 210, 206, 199, 255, 211, 249, 213, 157, 68, 203, 1, 185, 104, 100, 136, 243, 223, 114, 123, 109, 26, 9, 57, 27, 50, 10, 196, 240, 48, 100, 18, 167, 40, 247, 30, 173, 191, 183, 142, 45, 24, 140, 78, 128, 46, 219, 53, 156, 97, 146, 113, 57, 55, 75, 1, 109, 243, 109, 219, 193, 98, 185, 147, 42, 120, 231, 146, 37, 1, 150, 199, 224, 128, 242, 196, 197, 16, 196, 195, 120, 52, 174, 131, 180, 69, 92, 87, 54, 119, 146, 152, 139, 120, 190, 21, 103, 158, 87, 1, 67, 255, 147, 106, 173, 132, 189, 180, 7, 160, 172, 246, 124, 158, 150, 176, 47, 230, 72, 17, 208, 75, 170, 242, 108, 84, 170};
    const unsigned msg_sz = 199;
    unsigned char r[] = {0, 22, 166, 123, 46, 165, 18, 227};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test87)
{
    unsigned char msg[] = {4, 15, 148, 165, 181, 23, 210, 228, 102, 196, 175, 11, 79, 236, 206, 86, 172, 211, 202, 64, 104, 103, 130, 240, 205, 209, 40, 189, 57, 11, 139, 142, 3, 8, 176, 237, 159, 101, 27, 128, 91, 204, 244, 240, 59, 125, 129, 213, 231, 49, 69, 157, 178, 68, 149, 128, 57, 241, 23, 66, 204, 48, 18, 72, 236, 176, 125, 90, 158, 140, 48, 57, 24, 210, 206, 199, 255, 211, 249, 213, 157, 68, 203, 1, 185, 104, 100, 136, 243, 223, 114, 123, 109, 26, 9, 57, 27, 50, 10, 196, 240, 48, 100, 18, 167, 40, 247, 30, 173, 191, 183, 142, 45, 24, 140, 78, 128, 46, 219, 53, 156, 97, 146, 113, 57, 55, 75, 1, 109, 243, 109, 219, 193, 98, 185, 147, 42, 120, 231, 146, 37, 1, 150, 199, 224, 128, 242, 196, 197, 16, 196, 195, 120, 52, 174, 131, 180, 69, 92, 87, 54, 119, 146, 152, 139, 120, 190, 21, 103, 158, 87, 1, 67, 255, 147, 106, 173, 132, 87, 180, 7, 160, 172, 246, 124, 158, 150, 176, 47, 230, 72, 17, 208, 75, 170, 242, 108, 84, 170};
    const unsigned msg_sz = 199;
    unsigned char r[] = {0, 252, 19, 165, 253, 225, 254, 201};
    const unsigned r_sz = 8;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 7, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test88)
{
    unsigned char msg[] = {156, 217, 185, 4, 224, 135, 48, 251, 16, 1, 74, 59, 39, 112, 90, 192, 62, 121, 36, 25, 78, 213, 36, 190, 200, 49, 127, 52, 81, 252, 249, 80, 177, 12, 127, 255, 185, 117, 71, 231, 249, 157, 249, 82, 84, 161, 143, 99, 54, 158, 182, 135, 191, 137, 132, 210, 50, 10, 115, 73, 185, 236, 240, 215, 132, 199, 217, 13, 145, 151, 216, 242, 246, 78, 62, 249, 247, 154, 243, 36, 162, 79, 13, 82, 170, 233, 100, 106, 195, 202, 53, 3, 21, 165, 115, 22, 132, 234, 52, 235, 92, 98, 14, 127, 98, 159, 126, 250, 228, 69, 198, 247, 6, 205, 204, 77, 12};
    const unsigned msg_sz = 117;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test89)
{
    unsigned char msg[] = {156, 217, 185, 4, 224, 135, 48, 251, 16, 1, 74, 59, 39, 112, 90, 192, 62, 121, 36, 25, 78, 213, 36, 190, 200, 49, 127, 52, 81, 252, 249, 80, 177, 12, 127, 255, 185, 117, 71, 231, 249, 157, 249, 82, 84, 161, 143, 99, 54, 158, 182, 135, 191, 137, 132, 210, 50, 10, 115, 73, 185, 236, 240, 215, 132, 199, 217, 13, 145, 43, 216, 242, 246, 78, 62, 249, 247, 154, 243, 36, 162, 79, 13, 82, 170, 233, 100, 106, 195, 202, 53, 3, 21, 165, 115, 22, 132, 234, 52, 235, 92, 98, 14, 127, 98, 159, 126, 250, 228, 69, 198, 247, 6, 205, 204, 77, 12};
    const unsigned msg_sz = 117;
    unsigned char r[] = {0, 188, 199, 145, 121, 16, 10, 67, 77, 130, 22, 192};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test90)
{
    unsigned char msg[] = {156, 217, 185, 4, 224, 135, 48, 251, 16, 1, 74, 59, 39, 112, 90, 192, 62, 121, 36, 25, 78, 213, 36, 190, 200, 49, 127, 52, 81, 252, 249, 80, 177, 12, 127, 255, 185, 117, 71, 231, 249, 157, 249, 82, 84, 161, 143, 99, 54, 158, 182, 135, 191, 137, 132, 210, 50, 10, 115, 73, 185, 236, 240, 215, 132, 84, 217, 13, 145, 43, 216, 242, 246, 78, 62, 249, 247, 154, 243, 36, 162, 79, 13, 82, 170, 233, 100, 106, 195, 202, 53, 3, 21, 165, 115, 22, 132, 234, 52, 235, 92, 98, 14, 127, 98, 159, 126, 250, 228, 69, 198, 247, 6, 205, 204, 77, 12};
    const unsigned msg_sz = 117;
    unsigned char r[] = {0, 47, 16, 212, 225, 137, 153, 148, 8, 26, 143, 83};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test91)
{
    unsigned char msg[] = {156, 217, 185, 4, 224, 135, 48, 251, 16, 1, 74, 59, 39, 112, 90, 192, 62, 121, 36, 25, 78, 213, 36, 190, 200, 49, 127, 52, 81, 252, 249, 80, 177, 12, 127, 255, 185, 117, 71, 231, 249, 157, 249, 82, 84, 161, 143, 99, 54, 158, 182, 135, 191, 137, 132, 210, 50, 10, 115, 73, 185, 236, 240, 215, 132, 84, 217, 13, 145, 43, 216, 242, 246, 78, 62, 249, 247, 154, 243, 36, 162, 79, 13, 82, 170, 233, 100, 106, 195, 202, 53, 3, 21, 165, 115, 22, 132, 234, 52, 235, 92, 98, 14, 127, 98, 159, 126, 250, 228, 69, 198, 247, 198, 205, 204, 77, 12};
    const unsigned msg_sz = 117;
    unsigned char r[] = {0, 239, 140, 225, 150, 170, 147, 52, 218, 187, 77, 239};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test92)
{
    unsigned char msg[] = {156, 217, 185, 4, 224, 135, 48, 251, 16, 1, 74, 59, 39, 112, 90, 192, 62, 121, 36, 25, 78, 213, 36, 190, 200, 49, 127, 52, 81, 252, 249, 80, 177, 12, 127, 255, 185, 117, 71, 231, 249, 157, 249, 82, 84, 161, 143, 99, 54, 158, 182, 135, 191, 137, 132, 210, 50, 10, 115, 73, 185, 236, 240, 215, 132, 84, 217, 13, 52, 43, 216, 242, 246, 78, 62, 249, 247, 154, 243, 36, 162, 79, 13, 82, 170, 233, 100, 106, 195, 202, 53, 3, 21, 165, 115, 22, 132, 234, 52, 235, 92, 98, 14, 127, 98, 159, 126, 250, 228, 69, 198, 247, 198, 205, 204, 77, 12};
    const unsigned msg_sz = 117;
    unsigned char r[] = {0, 74, 71, 209, 170, 153, 101, 113, 201, 101, 42, 88};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test93)
{
    unsigned char msg[] = {156, 217, 185, 4, 224, 135, 48, 251, 16, 1, 74, 59, 39, 112, 90, 192, 62, 121, 36, 25, 78, 213, 36, 190, 200, 49, 127, 52, 81, 252, 249, 80, 177, 12, 127, 255, 185, 117, 71, 231, 249, 157, 249, 82, 84, 161, 143, 99, 54, 158, 182, 135, 191, 137, 132, 210, 50, 10, 115, 73, 185, 236, 240, 215, 132, 84, 217, 13, 52, 43, 216, 242, 246, 78, 62, 249, 247, 154, 243, 36, 162, 79, 13, 82, 170, 233, 100, 106, 195, 202, 53, 3, 21, 165, 115, 22, 132, 234, 52, 235, 92, 98, 14, 127, 98, 159, 126, 237, 228, 69, 198, 247, 198, 205, 204, 77, 12};
    const unsigned msg_sz = 117;
    unsigned char r[] = {0, 93, 102, 248, 78, 8, 148, 181, 75, 93, 115, 14};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test94)
{
    unsigned char msg[] = {88, 81, 148, 23, 242, 109, 105, 85, 183, 219, 58, 4, 75, 48};
    const unsigned msg_sz = 14;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test95)
{
    unsigned char msg[] = {88, 81, 148, 23, 242, 142, 105, 85, 183, 219, 58, 4, 75, 48};
    const unsigned msg_sz = 14;
    unsigned char r[] = {0, 227, 149, 130, 28, 81, 195, 18, 247, 44, 27, 2};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test96)
{
    unsigned char msg[] = {88, 81, 148, 23, 242, 142, 105, 85, 183, 219, 58, 4, 75, 242};
    const unsigned msg_sz = 14;
    unsigned char r[] = {0, 33, 87, 64, 222, 147, 1, 208, 53, 238, 217, 192};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test97)
{
    unsigned char msg[] = {88, 252, 148, 23, 242, 142, 105, 85, 183, 219, 58, 4, 75, 242};
    const unsigned msg_sz = 14;
    unsigned char r[] = {0, 140, 109, 53, 249, 82, 187, 255, 210, 88, 195, 45};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test98)
{
    unsigned char msg[] = {88, 248, 148, 23, 242, 142, 105, 85, 183, 219, 58, 4, 75, 242};
    const unsigned msg_sz = 14;
    unsigned char r[] = {0, 136, 126, 51, 109, 87, 101, 118, 99, 27, 164, 193};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test99)
{
    unsigned char msg[] = {88, 123, 148, 23, 242, 142, 105, 85, 183, 219, 58, 4, 75, 242};
    const unsigned msg_sz = 14;
    unsigned char r[] = {0, 11, 110, 127, 117, 61, 113, 41, 125, 229, 181, 64};
    const unsigned r_sz = 12;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 11, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test100)
{
    unsigned char msg[] = {168, 234, 122, 146, 6, 249, 101, 16, 48, 214, 120, 213, 180, 88, 29, 120, 4, 146, 79, 25, 63, 112, 92, 62, 249, 189, 147, 118, 125, 6, 228, 107, 184, 203, 6, 172, 18, 251, 255, 111, 61, 104, 121, 55, 150, 72, 176, 15, 204, 1, 217, 95, 71, 60, 138, 193, 88, 190, 216, 73, 92, 111, 86, 118, 95, 120, 170, 47, 117, 42, 82, 69, 162, 83, 99, 236, 160, 200, 100, 215, 70, 49, 181, 212, 17, 247, 51, 74, 184, 45, 252, 5, 191, 163, 163, 253, 167, 192, 20, 56, 106, 86};
    const unsigned msg_sz = 102;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test101)
{
    unsigned char msg[] = {168, 234, 122, 146, 6, 249, 101, 16, 48, 214, 120, 213, 180, 88, 29, 120, 4, 146, 79, 25, 63, 112, 92, 62, 249, 189, 147, 118, 125, 6, 228, 107, 184, 203, 6, 172, 18, 251, 255, 111, 61, 104, 121, 55, 150, 72, 176, 15, 204, 1, 217, 95, 71, 60, 138, 193, 88, 146, 216, 73, 92, 111, 86, 118, 95, 120, 170, 47, 117, 42, 82, 69, 162, 83, 99, 236, 160, 200, 100, 215, 70, 49, 181, 212, 17, 247, 51, 74, 184, 45, 252, 5, 191, 163, 163, 253, 167, 192, 20, 56, 106, 86};
    const unsigned msg_sz = 102;
    unsigned char r[] = {0, 44, 48, 202, 237, 209, 167, 54, 148, 211, 102, 215, 249, 8};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test102)
{
    unsigned char msg[] = {168, 234, 122, 146, 6, 249, 101, 16, 48, 214, 120, 213, 180, 88, 29, 120, 4, 146, 79, 25, 63, 112, 92, 62, 249, 189, 147, 118, 125, 6, 228, 107, 184, 203, 6, 172, 18, 251, 255, 111, 61, 104, 121, 55, 150, 72, 176, 15, 204, 1, 217, 95, 71, 60, 138, 193, 88, 146, 216, 57, 92, 111, 86, 118, 95, 120, 170, 47, 117, 42, 82, 69, 162, 83, 99, 236, 160, 200, 100, 215, 70, 49, 181, 212, 17, 247, 51, 74, 184, 45, 252, 5, 191, 163, 163, 253, 167, 192, 20, 56, 106, 86};
    const unsigned msg_sz = 102;
    unsigned char r[] = {0, 92, 202, 10, 39, 173, 114, 56, 204, 203, 56, 86, 192, 192};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test103)
{
    unsigned char msg[] = {168, 234, 122, 146, 6, 249, 101, 16, 48, 214, 120, 213, 180, 88, 29, 120, 4, 146, 79, 25, 63, 112, 92, 62, 249, 189, 147, 118, 125, 6, 228, 107, 184, 203, 6, 172, 18, 251, 255, 111, 61, 104, 121, 55, 150, 72, 176, 15, 204, 1, 217, 95, 71, 60, 138, 193, 88, 146, 216, 57, 92, 111, 86, 118, 95, 120, 170, 47, 117, 42, 82, 69, 162, 83, 99, 236, 160, 200, 100, 215, 70, 49, 181, 212, 123, 247, 51, 74, 184, 45, 252, 5, 191, 163, 163, 253, 167, 192, 20, 56, 106, 86};
    const unsigned msg_sz = 102;
    unsigned char r[] = {0, 54, 112, 131, 132, 125, 65, 18, 191, 40, 33, 15, 80, 58};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test104)
{
    unsigned char msg[] = {168, 234, 122, 146, 6, 249, 101, 16, 48, 214, 120, 213, 180, 88, 29, 120, 4, 146, 79, 25, 63, 112, 92, 62, 249, 189, 147, 118, 125, 6, 228, 107, 184, 203, 6, 172, 18, 251, 255, 111, 61, 104, 121, 88, 150, 72, 176, 15, 204, 1, 217, 95, 71, 60, 138, 193, 88, 146, 216, 57, 92, 111, 86, 118, 95, 120, 170, 47, 117, 42, 82, 69, 162, 83, 99, 236, 160, 200, 100, 215, 70, 49, 181, 212, 123, 247, 51, 74, 184, 45, 252, 5, 191, 163, 163, 253, 167, 192, 20, 56, 106, 86};
    const unsigned msg_sz = 102;
    unsigned char r[] = {0, 89, 227, 88, 111, 233, 152, 43, 198, 14, 235, 83, 7, 185};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test105)
{
    unsigned char msg[] = {168, 183, 122, 146, 6, 249, 101, 16, 48, 214, 120, 213, 180, 88, 29, 120, 4, 146, 79, 25, 63, 112, 92, 62, 249, 189, 147, 118, 125, 6, 228, 107, 184, 203, 6, 172, 18, 251, 255, 111, 61, 104, 121, 88, 150, 72, 176, 15, 204, 1, 217, 95, 71, 60, 138, 193, 88, 146, 216, 57, 92, 111, 86, 118, 95, 120, 170, 47, 117, 42, 82, 69, 162, 83, 99, 236, 160, 200, 100, 215, 70, 49, 181, 212, 123, 247, 51, 74, 184, 45, 252, 5, 191, 163, 163, 253, 167, 192, 20, 56, 106, 86};
    const unsigned msg_sz = 102;
    unsigned char r[] = {0, 4, 7, 90, 77, 209, 7, 177, 9, 173, 170, 118, 72, 114};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test106)
{
    unsigned char msg[] = {168, 183, 122, 146, 6, 249, 101, 16, 48, 214, 120, 213, 180, 88, 29, 120, 4, 146, 79, 158, 63, 112, 92, 62, 249, 189, 147, 118, 125, 6, 228, 107, 184, 203, 6, 172, 18, 251, 255, 111, 61, 104, 121, 88, 150, 72, 176, 15, 204, 1, 217, 95, 71, 60, 138, 193, 88, 146, 216, 57, 92, 111, 86, 118, 95, 120, 170, 47, 117, 42, 82, 69, 162, 83, 99, 236, 160, 200, 100, 215, 70, 49, 181, 212, 123, 247, 51, 74, 184, 45, 252, 5, 191, 163, 163, 253, 167, 192, 20, 56, 106, 86};
    const unsigned msg_sz = 102;
    unsigned char r[] = {0, 131, 229, 129, 93, 96, 251, 221, 53, 222, 242, 239, 29, 133};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test107)
{
    unsigned char msg[] = {78, 173, 214, 30, 59, 84, 158, 19, 175, 201, 208, 230, 166, 191, 17, 167, 169, 53, 177, 145, 1, 204, 163, 176, 174, 206, 159, 159, 171, 187, 195, 164, 100, 43, 77, 254, 214, 210, 128, 18, 61, 160, 176, 80, 193, 64, 52, 217, 144, 224, 40, 33, 245, 30, 147, 230, 40, 96, 102, 9, 218, 234, 47, 173, 167, 172, 184, 141, 159, 2, 68, 180, 250, 154, 94, 6, 158, 195, 128, 114, 169, 190, 231, 203, 32, 157, 211, 135, 64, 188, 135, 48, 136, 23, 173, 98, 21, 224, 138, 141, 105, 19, 53, 97, 173, 211, 53, 146, 39, 209, 76, 33, 232, 235, 59, 71, 121, 106, 143, 115, 239, 168, 49, 156, 148, 168, 136, 185, 35, 212, 98, 78, 151, 137, 116, 177, 81, 208, 16, 135, 3, 145, 223, 24, 242, 203, 254, 246, 14, 63, 137, 91, 236, 217, 245, 112, 58, 22, 119, 125, 185, 91, 124, 94, 39, 247, 48, 244, 21, 160, 83, 137, 44, 50, 247, 106, 58, 128, 69, 159, 135, 3, 137, 224, 36, 102, 124, 136, 35, 137};
    const unsigned msg_sz = 190;
    unsigned char r[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test108)
{
    unsigned char msg[] = {78, 173, 214, 30, 59, 84, 158, 19, 175, 201, 208, 230, 166, 191, 17, 167, 169, 224, 177, 145, 1, 204, 163, 176, 174, 206, 159, 159, 171, 187, 195, 164, 100, 43, 77, 254, 214, 210, 128, 18, 61, 160, 176, 80, 193, 64, 52, 217, 144, 224, 40, 33, 245, 30, 147, 230, 40, 96, 102, 9, 218, 234, 47, 173, 167, 172, 184, 141, 159, 2, 68, 180, 250, 154, 94, 6, 158, 195, 128, 114, 169, 190, 231, 203, 32, 157, 211, 135, 64, 188, 135, 48, 136, 23, 173, 98, 21, 224, 138, 141, 105, 19, 53, 97, 173, 211, 53, 146, 39, 209, 76, 33, 232, 235, 59, 71, 121, 106, 143, 115, 239, 168, 49, 156, 148, 168, 136, 185, 35, 212, 98, 78, 151, 137, 116, 177, 81, 208, 16, 135, 3, 145, 223, 24, 242, 203, 254, 246, 14, 63, 137, 91, 236, 217, 245, 112, 58, 22, 119, 125, 185, 91, 124, 94, 39, 247, 48, 244, 21, 160, 83, 137, 44, 50, 247, 106, 58, 128, 69, 159, 135, 3, 137, 224, 36, 102, 124, 136, 35, 137};
    const unsigned msg_sz = 190;
    unsigned char r[] = {0, 213, 137, 207, 99, 253, 173, 229, 177, 8, 255, 91, 58, 49};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test109)
{
    unsigned char msg[] = {78, 173, 214, 30, 59, 84, 158, 19, 175, 201, 208, 230, 166, 191, 17, 167, 169, 224, 177, 145, 1, 204, 163, 176, 174, 206, 159, 159, 171, 187, 195, 164, 100, 43, 77, 254, 214, 210, 128, 18, 61, 160, 176, 80, 193, 64, 52, 217, 144, 224, 40, 33, 245, 30, 147, 230, 40, 96, 102, 9, 218, 234, 47, 173, 167, 172, 184, 141, 159, 2, 68, 180, 250, 154, 94, 6, 158, 195, 128, 114, 169, 190, 231, 203, 32, 157, 211, 135, 64, 188, 135, 48, 136, 23, 173, 98, 21, 224, 138, 141, 105, 19, 53, 97, 173, 211, 53, 146, 39, 209, 76, 33, 232, 235, 59, 71, 121, 106, 143, 115, 239, 168, 49, 156, 148, 168, 136, 185, 35, 8, 98, 78, 151, 137, 116, 177, 81, 208, 16, 135, 3, 145, 223, 24, 242, 203, 254, 246, 14, 63, 137, 91, 236, 217, 245, 112, 58, 22, 119, 125, 185, 91, 124, 94, 39, 247, 48, 244, 21, 160, 83, 137, 44, 50, 247, 106, 58, 128, 69, 159, 135, 3, 137, 224, 36, 102, 124, 136, 35, 137};
    const unsigned msg_sz = 190;
    unsigned char r[] = {0, 9, 10, 219, 226, 134, 90, 175, 30, 221, 100, 177, 233, 27};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test110)
{
    unsigned char msg[] = {78, 173, 214, 30, 59, 84, 158, 19, 175, 201, 208, 230, 166, 191, 17, 167, 169, 224, 177, 145, 1, 204, 163, 176, 174, 206, 159, 159, 171, 187, 195, 164, 100, 43, 77, 254, 214, 210, 128, 18, 61, 160, 176, 80, 193, 64, 52, 217, 144, 224, 40, 33, 245, 30, 147, 230, 40, 96, 102, 9, 218, 234, 47, 173, 167, 172, 184, 141, 159, 2, 68, 180, 250, 154, 94, 6, 158, 195, 128, 114, 169, 190, 231, 203, 32, 157, 211, 135, 64, 188, 135, 48, 136, 23, 173, 98, 21, 224, 138, 141, 105, 19, 53, 97, 173, 211, 53, 146, 39, 209, 76, 33, 232, 235, 59, 71, 121, 106, 143, 115, 239, 168, 49, 156, 148, 168, 136, 185, 35, 8, 98, 78, 151, 137, 198, 177, 81, 208, 16, 135, 3, 145, 223, 24, 242, 203, 254, 246, 14, 63, 137, 91, 236, 217, 245, 112, 58, 22, 119, 125, 185, 91, 124, 94, 39, 247, 48, 244, 21, 160, 83, 137, 44, 50, 247, 106, 58, 128, 69, 159, 135, 3, 137, 224, 36, 102, 124, 136, 35, 137};
    const unsigned msg_sz = 190;
    unsigned char r[] = {0, 187, 226, 186, 148, 101, 175, 111, 175, 200, 172, 105, 227, 47};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test111)
{
    unsigned char msg[] = {78, 173, 214, 30, 59, 84, 158, 19, 175, 201, 208, 230, 166, 191, 17, 167, 169, 224, 177, 145, 1, 204, 163, 176, 174, 206, 159, 159, 171, 187, 195, 164, 100, 43, 77, 254, 214, 210, 128, 18, 61, 160, 176, 80, 193, 64, 52, 217, 144, 224, 40, 33, 245, 30, 147, 230, 40, 96, 102, 9, 218, 234, 47, 173, 167, 172, 184, 141, 159, 2, 68, 180, 250, 154, 94, 6, 158, 195, 128, 114, 169, 190, 231, 203, 32, 157, 211, 135, 64, 188, 135, 48, 136, 23, 173, 98, 21, 224, 138, 141, 105, 19, 53, 97, 173, 211, 53, 146, 39, 209, 76, 33, 232, 235, 59, 71, 121, 106, 143, 115, 239, 168, 49, 156, 148, 168, 136, 185, 35, 8, 98, 78, 151, 137, 198, 177, 81, 208, 16, 135, 3, 145, 223, 24, 242, 203, 254, 246, 14, 63, 137, 91, 236, 217, 245, 112, 58, 22, 119, 125, 185, 91, 124, 94, 39, 247, 48, 244, 21, 160, 83, 137, 44, 50, 247, 106, 58, 128, 69, 159, 135, 3, 109, 224, 36, 102, 124, 136, 35, 137};
    const unsigned msg_sz = 190;
    unsigned char r[] = {0, 95, 129, 109, 79, 240, 238, 104, 8, 177, 250, 33, 16, 3};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test112)
{
    unsigned char msg[] = {78, 173, 214, 30, 59, 168, 158, 19, 175, 201, 208, 230, 166, 191, 17, 167, 169, 224, 177, 145, 1, 204, 163, 176, 174, 206, 159, 159, 171, 187, 195, 164, 100, 43, 77, 254, 214, 210, 128, 18, 61, 160, 176, 80, 193, 64, 52, 217, 144, 224, 40, 33, 245, 30, 147, 230, 40, 96, 102, 9, 218, 234, 47, 173, 167, 172, 184, 141, 159, 2, 68, 180, 250, 154, 94, 6, 158, 195, 128, 114, 169, 190, 231, 203, 32, 157, 211, 135, 64, 188, 135, 48, 136, 23, 173, 98, 21, 224, 138, 141, 105, 19, 53, 97, 173, 211, 53, 146, 39, 209, 76, 33, 232, 235, 59, 71, 121, 106, 143, 115, 239, 168, 49, 156, 148, 168, 136, 185, 35, 8, 98, 78, 151, 137, 198, 177, 81, 208, 16, 135, 3, 145, 223, 24, 242, 203, 254, 246, 14, 63, 137, 91, 236, 217, 245, 112, 58, 22, 119, 125, 185, 91, 124, 94, 39, 247, 48, 244, 21, 160, 83, 137, 44, 50, 247, 106, 58, 128, 69, 159, 135, 3, 109, 224, 36, 102, 124, 136, 35, 137};
    const unsigned msg_sz = 190;
    unsigned char r[] = {0, 163, 46, 107, 22, 178, 119, 197, 57, 214, 207, 40, 89, 228};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}

TEST(RsCalcSyndromes, Test113)
{
    unsigned char msg[] = {78, 173, 214, 30, 59, 168, 158, 19, 175, 201, 208, 230, 166, 191, 17, 167, 169, 224, 177, 145, 1, 204, 163, 176, 174, 206, 159, 159, 171, 187, 195, 164, 100, 43, 77, 254, 214, 210, 128, 18, 61, 160, 176, 80, 193, 64, 52, 217, 144, 224, 40, 33, 245, 30, 147, 230, 40, 96, 102, 9, 218, 234, 47, 173, 167, 172, 184, 141, 159, 2, 68, 180, 250, 154, 94, 6, 158, 195, 128, 114, 169, 190, 231, 203, 32, 157, 211, 135, 64, 188, 135, 48, 136, 23, 173, 98, 21, 224, 138, 141, 105, 19, 53, 97, 173, 211, 53, 146, 39, 209, 76, 33, 232, 235, 59, 71, 121, 106, 143, 115, 239, 168, 49, 156, 148, 168, 136, 185, 35, 8, 98, 78, 151, 137, 221, 177, 81, 208, 16, 135, 3, 145, 223, 24, 242, 203, 254, 246, 14, 63, 137, 91, 236, 217, 245, 112, 58, 22, 119, 125, 185, 91, 124, 94, 39, 247, 48, 244, 21, 160, 83, 137, 44, 50, 247, 106, 58, 128, 69, 159, 135, 3, 109, 224, 36, 102, 124, 136, 35, 137};
    const unsigned msg_sz = 190;
    unsigned char r[] = {0, 184, 104, 227, 161, 64, 240, 92, 252, 125, 60, 15, 167, 176};
    const unsigned r_sz = 14;
    unsigned char buf[300];
    unsigned buf_sz;
    redupe_calc_syndromes(msg, msg_sz, 13, buf, &buf_sz);
    ASSERT_EQ(buf_sz, r_sz);
    for (unsigned i = 0; i < r_sz; ++i)
    {
        ASSERT_EQ(buf[i], r[i]);
    }
}
